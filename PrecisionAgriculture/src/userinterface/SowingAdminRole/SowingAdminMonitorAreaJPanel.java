/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SowingAdminRole;

import Business.Enterprise.Enterprise;
import Business.Farmer.Farmer;
import Business.Organization.IrrigationOrganization;
import Business.Organization.Organization;
import Business.Organization.SowingOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.IrrigationWorkRequest;
import Business.WorkQueue.SowingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jocel
 */
public class SowingAdminMonitorAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SowingAdminWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private IrrigationOrganization irrigationOrganization;
    private SowingOrganization sowingOrganization;
    private Enterprise enterprise;
    private UserAccount userAccount;


    SowingAdminMonitorAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, SowingOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.sowingOrganization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(org instanceof IrrigationOrganization)
            {
                this.irrigationOrganization = (IrrigationOrganization) org;
            }
        }
        valueLabel.setText(enterprise.getName());
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        assignedFarmersLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        farmersAssignedToSowingJTable = new javax.swing.JTable();
        selectFarmerAssignedLabel = new javax.swing.JLabel();
        reportToIrrigationAdminJButton = new javax.swing.JButton();
        backJBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        enterpriseLabel.setText("Enterprise :");

        valueLabel.setText("<value>");

        assignedFarmersLabel.setText("Farmer's Assigned to me:");

        farmersAssignedToSowingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Farmer ID", "Farmer Name", "Farm Size", "Crop Selected", "Sowing Status", "Object", "Report status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(farmersAssignedToSowingJTable);
        if (farmersAssignedToSowingJTable.getColumnModel().getColumnCount() > 0) {
            farmersAssignedToSowingJTable.getColumnModel().getColumn(5).setMinWidth(0);
            farmersAssignedToSowingJTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            farmersAssignedToSowingJTable.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        selectFarmerAssignedLabel.setText("Select Farmer to Report to Irrigation Admin");

        reportToIrrigationAdminJButton.setText("Report");
        reportToIrrigationAdminJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportToIrrigationAdminJButtonActionPerformed(evt);
            }
        });

        backJBtn.setText("<< Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Sowing Employee Monitoring Area Panel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 139, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assignedFarmersLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(486, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(backJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(reportToIrrigationAdminJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectFarmerAssignedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assignedFarmersLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(selectFarmerAssignedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reportToIrrigationAdminJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addGap(125, 125, 125))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reportToIrrigationAdminJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportToIrrigationAdminJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = farmersAssignedToSowingJTable.getSelectedRow();
        
        //if((String)farmersAssignedToSowingJTable.getValueAt(selectedRow, 4) != "Sowing Done")
        if (selectedRow < 0)
        {
           JOptionPane.showMessageDialog(null, "Please Select a Row");
           return;
        }
        String status = (String)farmersAssignedToSowingJTable.getValueAt(selectedRow, 4);
        if(!status.equalsIgnoreCase("Sowing Done"))
        {
            JOptionPane.showMessageDialog(null, "Sowing is not done yet. So you can't report to irrigation admin");
            return;
        }
        
        Farmer farmer = (Farmer)farmersAssignedToSowingJTable.getValueAt(selectedRow, 5);
        IrrigationWorkRequest irrigationWorkRequest = new IrrigationWorkRequest();
        for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(((Farmer)((SowingWorkRequest)workRequest).getData()).getStatus().equalsIgnoreCase("Reported"))
            {
                JOptionPane.showMessageDialog(null, "Farmer is already reported!!");
                return;  
            }
//            else if(((Farmer)((SowingWorkRequest)workRequest).getData()).getStatus().equalsIgnoreCase("Sowing Done"))
//            {
//                workRequest.setStatus("Reported to Irrigation Organization");
//            }
        }
        
        irrigationWorkRequest.setReceiver(userAccount);
        irrigationWorkRequest.setRequestDate(new Date());
        irrigationWorkRequest.setStatus("Reported to Irrigation Organization");
        farmer.setStatus("Reported to Irrigation Organization");
        irrigationWorkRequest.setData(farmer);
        irrigationWorkRequest.setFarmerUserId(farmer.getFarmerId());
        farmer.getUserAccount().getWorkQueue().getWorkRequestList().add(irrigationWorkRequest);
        irrigationOrganization.getWorkQueue().getWorkRequestList().add(irrigationWorkRequest);
        //userAccount.getWorkQueue().getWorkRequestList().add(irrigationWorkRequest);
         JOptionPane.showMessageDialog(null, "Farmer reported Successfully!!");
         populateTable();
    }//GEN-LAST:event_reportToIrrigationAdminJButtonActionPerformed

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assignedFarmersLabel;
    private javax.swing.JButton backJBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JTable farmersAssignedToSowingJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton reportToIrrigationAdminJButton;
    private javax.swing.JLabel selectFarmerAssignedLabel;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

    private void populateTable() 
    {
        DefaultTableModel model = (DefaultTableModel) farmersAssignedToSowingJTable.getModel();
        
        model.setRowCount(0);
        
        for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            Object[] row = new Object[7];
            row[0] = ((Farmer)((SowingWorkRequest)workRequest).getData()).getFarmerId();
            row[1] = ((Farmer)((SowingWorkRequest)workRequest).getData()).getFarmerName();
            row[2] = ((Farmer)((SowingWorkRequest)workRequest).getData()).getFarmSize();
            row[3] = ((Farmer)((SowingWorkRequest)workRequest).getData()).getCropName();
            row[4] = (((SowingWorkRequest)workRequest)).getStatus();
            row[5] = ((Farmer)((SowingWorkRequest)workRequest).getData());
            row[6] = ((Farmer)((SowingWorkRequest)workRequest).getData()).getStatus();
            model.addRow(row);
            
        }
    }
}
