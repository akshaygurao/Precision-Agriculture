/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HarvestingAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Farmer.Farmer;
import Business.Network.Network;
import Business.Organization.HarvestingOrganization;
import Business.Organization.Organization;
import Business.Organization.TransportOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FertilizerWorkRequest;
import Business.WorkQueue.HarvestingWorkRequest;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jocel
 */
public class HarvestingAdminMonitorAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HarvestingAdminWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private HarvestingOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private TransportOrganization transportOrganization;
    private EcoSystem system;
    
    

    

    HarvestingAdminMonitorAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, HarvestingOrganization harvestingOrganization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        //this.fertilizerOrganization = fertilizerOrganization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.system = system;
        
//        for(Network network : system.getNetworkList())
//        {
//            network.getName().equalsIgnoreCase("India");                
//        }
        
        
        
        for(Network network : system.getNetworkList())
        {
            for(Enterprise e :network.getEnterpriseDirectory().getEnterpriseList())
            {
                //if(e.getOrganizationDirectory().getOrganizationList().contains(TransportOrganization.class))
                
                {
                    for(Organization org : e.getOrganizationDirectory().getOrganizationList())
                {
                    if(org instanceof TransportOrganization)
                    {
                        this.transportOrganization = (TransportOrganization) org;
                    }
                }
                }
                
            }
        }
//       for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
        
//        {
//            if(org instanceof TransportOrganization)
//            {
//                this.transportOrganization = (TransportOrganization) org;
//            }
//        }
        
        valueLabel.setText(enterprise.getName());
        populateTable();
    }

    private void populateTable() 
    {
        DefaultTableModel model = (DefaultTableModel) farmersAssignedToHarvestingJTable.getModel();
        
        model.setRowCount(0);
        
        for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            Object[] row = new Object[8];
            row[0] = ((Farmer)((HarvestingWorkRequest)workRequest).getData()).getFarmerId();
            row[1] = ((Farmer)((HarvestingWorkRequest)workRequest).getData()).getFarmerName();
            row[2] = ((Farmer)((HarvestingWorkRequest)workRequest).getData()).getFarmSize();
            row[3] = ((Farmer)((HarvestingWorkRequest)workRequest).getData()).getCropName();
            row[4] = (((HarvestingWorkRequest)workRequest)).getStatus();
            row[5] = ((Farmer)((HarvestingWorkRequest)workRequest).getData());
            row[6] = ((Farmer)((HarvestingWorkRequest)workRequest).getData()).getStatus();
            row[7] = ((Farmer)((HarvestingWorkRequest)workRequest).getData()).getCropQuantity();
            model.addRow(row);
            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        assignedFarmersLabel = new javax.swing.JLabel();
        backJBtn = new javax.swing.JButton();
        selectFarmerAssignedLabel = new javax.swing.JLabel();
        requestForTransportJBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        farmersAssignedToHarvestingJTable = new javax.swing.JTable();

        enterpriseLabel.setText("Enterprise :");

        valueLabel.setText("<value>");

        assignedFarmersLabel.setText("Farmer's Assigned to me:");

        backJBtn.setText("<< Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        selectFarmerAssignedLabel.setText("Request Transport of harvested goods");

        requestForTransportJBtn.setText("Request");
        requestForTransportJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestForTransportJBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Harvesting Employee Monitoring Panel");

        farmersAssignedToHarvestingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Farmer ID", "Farmer Name", "Farm Size", "Crop Selected", "Harvesting Status", "Object", "Farmer Status", "Quantity Produced"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(farmersAssignedToHarvestingJTable);
        if (farmersAssignedToHarvestingJTable.getColumnModel().getColumnCount() > 0) {
            farmersAssignedToHarvestingJTable.getColumnModel().getColumn(5).setMinWidth(0);
            farmersAssignedToHarvestingJTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            farmersAssignedToHarvestingJTable.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(assignedFarmersLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(backJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectFarmerAssignedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(requestForTransportJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(17, 17, 17)
                .addComponent(assignedFarmersLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(selectFarmerAssignedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(requestForTransportJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(260, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void requestForTransportJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestForTransportJBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = farmersAssignedToHarvestingJTable.getSelectedRow();
        
        if (selectedRow < 0)
        {
           JOptionPane.showMessageDialog(null, "Please Select a Row");
           return;
        }
        
        String status = (String)farmersAssignedToHarvestingJTable.getValueAt(selectedRow, 4);
//        if(!status.equalsIgnoreCase("Harvesting Done"))
//        {
//            JOptionPane.showMessageDialog(null, "Harvesting is not done yet. So you can't report to transport admin");
//            return;
//        }
        
        Farmer farmer = (Farmer)farmersAssignedToHarvestingJTable.getValueAt(selectedRow, 5);
        TransportWorkRequest transportWorkRequest = new TransportWorkRequest();
        for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
//            if(((Farmer)((IrrigationWorkRequest)workRequest).getData()).getStatus().equalsIgnoreCase("Reported"))
//            {
//            JOptionPane.showMessageDialog(null, "Farmer is already reported!!");
//            return;  
//            }
        }
        
        transportWorkRequest.setReceiver(userAccount);
        transportWorkRequest.setRequestDate(new Date());
        transportWorkRequest.setStatus("Reported to Harvesting Organization");
        transportWorkRequest.setFarmerUserId(farmer.getFarmerId());
        transportWorkRequest.setData(farmer);
        
        transportOrganization.getWorkQueue().getWorkRequestList().add(transportWorkRequest);
        //userAccount.getWorkQueue().getWorkRequestList().add(irrigationWorkRequest);
         JOptionPane.showMessageDialog(null, "Farmer reported Successfully!!");
         populateTable();
    }//GEN-LAST:event_requestForTransportJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assignedFarmersLabel;
    private javax.swing.JButton backJBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JTable farmersAssignedToHarvestingJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton requestForTransportJBtn;
    private javax.swing.JLabel selectFarmerAssignedLabel;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
