/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Farmer.Farmer;
import Business.Network.Network;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import java.awt.CardLayout;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author aksha
 */
public class ReportsJPanel extends javax.swing.JPanel {
private JPanel userProcessContainer;
private OrganizationDirectory organizationDirectory;
private EcoSystem business;
    /**
     * Creates new form ReportsJPanel
     */
    public ReportsJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDirectory, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organizationDirectory = organizationDirectory;
        this.business = business;
        generateReport();
    }

    public int maizeCount = 0;
    public int riceCount=0;
    public int wheatCount = 0;
    public int maizeQuantity = 0;
    public int riceQuantity =0;
    public int wheatQuantity = 0;
public void generateReport() {
    
    for(Network network : business.getNetworkList()) {
        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            for(Farmer farmer : enterprise.getFarmerDirectory().getFarmerList()) {
                if(farmer.getCropName() != null)
                {
                if(farmer.getCropName().equalsIgnoreCase("Maize")) {
                    maizeCount++;
                    maizeQuantity =+ farmer.getCropQuantity();
                } else if(farmer.getCropName().equalsIgnoreCase("Rice")) {
                    riceCount++;
                    riceQuantity =+ farmer.getCropQuantity();
                } else if(farmer.getCropName().equalsIgnoreCase("Wheat")) {
                    wheatCount++;
                    wheatQuantity =+ farmer.getCropQuantity();
                }
                }
            }
        }
    }
    
    
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        totalQuantityJBtn = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        farmerStatusJButton = new javax.swing.JButton();

        totalQuantityJBtn.setText("Total Quantity of crops produced");
        totalQuantityJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalQuantityJBtnActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        farmerStatusJButton.setText("All Farmer's Status");
        farmerStatusJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                farmerStatusJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalQuantityJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(farmerStatusJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(totalQuantityJBtn)
                .addGap(18, 18, 18)
                .addComponent(farmerStatusJButton)
                .addGap(21, 21, 21)
                .addComponent(backJButton)
                .addContainerGap(136, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        //        Component[] componentArray = userProcessContainer.getComponents();
        //        Component component = componentArray[componentArray.length - 1];
        //        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        //        sysAdminwjp.populateTree();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void totalQuantityJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalQuantityJBtnActionPerformed
        // TODO add your handling code here:
        DefaultPieDataset pieDataSet = new DefaultPieDataset();
        pieDataSet.setValue("Maize", maizeQuantity);
        pieDataSet.setValue("Rice", riceQuantity);
        pieDataSet.setValue("Wheat", wheatQuantity);
        JFreeChart chart = ChartFactory.createPieChart("Total Quantity of crops produced in the network", pieDataSet, true, true, true);
        PiePlot Pie = (PiePlot)chart.getPlot();
        //Pie.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame = new ChartFrame("Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(450,500);
    }//GEN-LAST:event_totalQuantityJBtnActionPerformed

    private void farmerStatusJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_farmerStatusJButtonActionPerformed
        // TODO add your handling code here:
        int sowingDoneCount=0;
          int irrigationDoneCount=0;
            int fertilizationDoneCount=0;
              int harvestingDoneCount=0;
         for(Network network : business.getNetworkList())
       {
           for(Enterprise e :network.getEnterpriseDirectory().getEnterpriseList())
           {
               
               {
                   for(Farmer f : e.getFarmerDirectory().getFarmerList())
               {
                   if(f.getStatus().equalsIgnoreCase("Sowing Done"));
                   {
                       sowingDoneCount=sowingDoneCount++;
                   }
                   if(f.getStatus().equalsIgnoreCase("Irrigation Done"));
                   {
                       irrigationDoneCount=irrigationDoneCount++;
                   }
                   if(f.getStatus().equalsIgnoreCase("Fertilization Done"));
                   {
                       fertilizationDoneCount=fertilizationDoneCount++;
                   }
                   if(f.getStatus().equalsIgnoreCase("Harvesting Done"));
                   {
                       harvestingDoneCount=harvestingDoneCount++;
                   }
               }
               }
               
           }
       }
         
        DefaultPieDataset pieDataSet = new DefaultPieDataset();
        pieDataSet.setValue("SOWING DONE", sowingDoneCount);
        pieDataSet.setValue("IRRIGATION DONE", irrigationDoneCount);
        pieDataSet.setValue("FERTILIZATION DONE", fertilizationDoneCount);
        pieDataSet.setValue("HARVESTING DONE", harvestingDoneCount);
        JFreeChart chart = ChartFactory.createPieChart("Farmer's at each stage in the network", pieDataSet, true, true, true);
        PiePlot Pie = (PiePlot)chart.getPlot();
        //Pie.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame = new ChartFrame("Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(500,500);
        
    }//GEN-LAST:event_farmerStatusJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton farmerStatusJButton;
    private javax.swing.JButton totalQuantityJBtn;
    // End of variables declaration//GEN-END:variables
}
