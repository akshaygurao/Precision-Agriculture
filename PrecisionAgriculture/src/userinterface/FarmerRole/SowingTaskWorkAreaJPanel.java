/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FarmerRole;

import Business.CSV.IdealCondition;
import Business.CSV.Sensor;
import Business.CSV.Weather;
import Business.Enterprise.Enterprise;
import Business.Initialization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.SowingOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SowingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.Farmer.Farmer;

/**
 *
 * @author aksha
 */
public class SowingTaskWorkAreaJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private Initialization initialization;
    private OrganizationDirectory organizationDirectory;
    ArrayList<Weather> weatherDataList;
    ArrayList<Sensor> sensorDataList;
    ArrayList<IdealCondition> idealConditionCropList;
    ArrayList<Weather> tableWeather;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Farmer farmer;
    private SowingWorkRequest sowingWorkRequest;
    /**
     * Creates new form SowingTaskWorkAreaJPanel
     */
    
    SowingTaskWorkAreaJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDirectory, Initialization initialization, Farmer farmer) throws IOException {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.initialization = initialization;
        this.organizationDirectory = organizationDirectory;
        this.farmer=farmer;
        this.userAccount = farmer.getUserAccount();
        this.sowingWorkRequest = new SowingWorkRequest();
        
        weatherDataList = initialization.readWeatherData();
        System.out.println("--------Weather data fetched successfully---------" + weatherDataList.size());
        
        sensorDataList = initialization.readSensorData();
        System.out.println("--------Sensor data fetched successfully---------" + sensorDataList.size());

        idealConditionCropList = initialization.readIdealConditionList();
        System.out.println("--------Ideal Condtions data fetched successfully---------" + idealConditionCropList.size());
        
        tableWeather = new ArrayList<>();
        populateTable();
        populateCropComboBox();
        for(WorkRequest workRequest: userAccount.getWorkQueue().getWorkRequestList())
        {
            if(workRequest instanceof SowingWorkRequest && workRequest != null && workRequest.getStatus().equalsIgnoreCase("Sowing Started and in progress"))
            {
                sowingWorkRequest = (SowingWorkRequest)workRequest;
                setDataInFields();
                startJBtn.setEnabled(false);
                endJBtn.setEnabled(true);
            }
            else if(workRequest instanceof SowingWorkRequest && workRequest != null && !workRequest.getStatus().equalsIgnoreCase("Sowing Started and in progress"))
            {
                setDataInFields();
                startJBtn.setEnabled(false);
                endJBtn.setEnabled(false);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestSensorDataJBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cropJComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        conditionsJBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        priceTxtFld = new javax.swing.JTextField();
        quantityTxtFld = new javax.swing.JTextField();
        startJBtn = new javax.swing.JButton();
        endJBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        daysTxtFld = new javax.swing.JTextField();
        backJBtn = new javax.swing.JButton();

        requestSensorDataJBtn.setText("Request Sensor Data");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Sowing Task - Farmer Role");

        jLabel2.setText("Name of the crop:");

        cropJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cropJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropJComboBoxActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Temperature", "Rainfall", "Humidity", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        conditionsJBtn.setText("Check conditions for 1 month");
        conditionsJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conditionsJBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Price:");

        jLabel4.setText("Quantity:");

        startJBtn.setText("Start Sowing Process");
        startJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startJBtnActionPerformed(evt);
            }
        });

        endJBtn.setText("End Sowing Process");
        endJBtn.setEnabled(false);
        endJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endJBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Expected days:");

        backJBtn.setText("<< Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(conditionsJBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(33, 33, 33)
                                .addComponent(cropJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(priceTxtFld)
                                    .addComponent(quantityTxtFld)
                                    .addComponent(daysTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(startJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(backJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(jLabel1)))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cropJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(conditionsJBtn)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(priceTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(quantityTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(daysTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(startJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(endJBtn)
                .addGap(18, 18, 18)
                .addComponent(backJBtn)
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void endJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endJBtnActionPerformed
        
        for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(workRequest instanceof SowingWorkRequest)
            {
                workRequest.setResolveDate(new Date());
                ((Farmer)((SowingWorkRequest) workRequest).getData()).setStatus("Sowing Done");
                workRequest.setStatus("Sowing Done");
            }
        }
        endJBtn.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Sowing Done. Status will be updated to admin");
        return;
        
        
    }//GEN-LAST:event_endJBtnActionPerformed

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void cropJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cropJComboBoxActionPerformed

    private void conditionsJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conditionsJBtnActionPerformed
       

       String cropSelected = (String) cropJComboBox.getSelectedItem();
        for(IdealCondition idealCondition : idealConditionCropList)
       {
           for(Weather weather : weatherDataList)
           {
               int temp = Integer.parseInt(weather.getTemperature()); //25
               int idealMinTemp = Integer.parseInt(idealCondition.getMinTemperature()); //11 or 38
               int idealMaxTemp = Integer.parseInt(idealCondition.getMaxTemperature()); //11 or 38
                if(idealCondition.getCropName().equalsIgnoreCase(cropSelected) 
                    )
               {
                   //joc
                 if(temp <= idealMinTemp && (temp >= idealMaxTemp))
                 {
                   //System.out.println("Hi! I m inside weather loop!");
                   
                   weather.setResult("Excellent");
                  if(idealMaxTemp == temp)
                   {
                       weather.setResult("Excellent weather");
                       
                   }
                   else
                   {
                       weather.setResult("Average Weather");
                   }
                   tableWeather.add(weather);
                   
               }
               }
                
           }
       }
       populateTable();
        
    }//GEN-LAST:event_conditionsJBtnActionPerformed

    private void startJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startJBtnActionPerformed
        
        try
        {
            farmer.setCropPrice(Integer.parseInt(priceTxtFld.getText()));
            farmer.setCropQuantity(Integer.parseInt(quantityTxtFld.getText()));
            farmer.setExpectedDays(Integer.parseInt(daysTxtFld.getText()));
            farmer.setCropName((String)cropJComboBox.getSelectedItem());
            farmer.setStatus("Sowing Started and in progress");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Only Numbers allowed in all text box!!");
            System.out.println("Exception : " + e.getCause());
            return;  
        }
        
        if(userAccount.getWorkQueue().getWorkRequestList().isEmpty())
        {           
            sowingWorkRequest.setReceiver(userAccount);
            sowingWorkRequest.setRequestDate(new Date());
            sowingWorkRequest.setStatus("Sowing Started and in progress");
            sowingWorkRequest.setData(farmer);
            sowingWorkRequest.setFarmerUserId(farmer.getFarmerId());
            userAccount.getWorkQueue().getWorkRequestList().add(sowingWorkRequest);
            for(Organization organization : organizationDirectory.getOrganizationList())
            {
                if(organization instanceof SowingOrganization)
                {
                    organization.getWorkQueue().getWorkRequestList().add(sowingWorkRequest);
                }
            }
        }    
        
        endJBtn.setEnabled(true);
        startJBtn.setEnabled(false);
        
    }//GEN-LAST:event_startJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJBtn;
    private javax.swing.JButton conditionsJBtn;
    private javax.swing.JComboBox<String> cropJComboBox;
    private javax.swing.JTextField daysTxtFld;
    private javax.swing.JButton endJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField priceTxtFld;
    private javax.swing.JTextField quantityTxtFld;
    private javax.swing.JButton requestSensorDataJBtn;
    private javax.swing.JButton startJBtn;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    private void populateTable() 
    {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        while (model.getRowCount() > 0){
        for (int i = 0; i < model.getRowCount(); ++i){
            model.removeRow(i);
        }
    }
        workRequestJTable.removeAll();
        System.out.println("Populate method was called!");
        for (Weather weather : tableWeather)
        {
            Object[] row = new Object[5];
            row[0] = weather.getDate();
            row[1] = weather.getTemperature();
            row[2] = "";
            row[3] = weather.getHumidity();
            row[4] = weather.getResult();
            
            model.addRow(row);
            
        }
    }

    private void populateCropComboBox() 
    {
        cropJComboBox.removeAllItems();
        
        for (IdealCondition idealCondition : idealConditionCropList)
        {
            cropJComboBox.addItem(idealCondition.getCropName());
        }
    }

    private void setDataInFields() 
    {
        cropJComboBox.setSelectedItem(farmer.getCropName());
        priceTxtFld.setText(farmer.getCropPrice()+"");
        daysTxtFld.setText(farmer.getExpectedDays()+"");
        quantityTxtFld.setText(farmer.getCropQuantity()+"");
        priceTxtFld.setEnabled(false);
        daysTxtFld.setEnabled(false);
        quantityTxtFld.setEnabled(false);
        
    }
    
}
