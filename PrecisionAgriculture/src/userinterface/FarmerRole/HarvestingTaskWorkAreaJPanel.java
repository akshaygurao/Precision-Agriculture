/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FarmerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Farmer.Farmer;
import Business.Organization.HarvestingOrganization;
import Business.WorkQueue.FertilizerWorkRequest;
import Business.WorkQueue.HarvestingWorkRequest;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.TransportOrganization;
import Business.WorkQueue.SowingWorkRequest;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author aksha
 */

public class HarvestingTaskWorkAreaJPanel extends javax.swing.JPanel {
private JPanel userProcessContainer;
private OrganizationDirectory organizationDirectory;
private Farmer farmer;
private UserAccount userAccount;
private TransportOrganization transportOrganization;
private EcoSystem system;
private WorkQueue workQueue;

private HarvestingWorkRequest harvestingWorkRequest;

private TransportWorkRequest transportWorkRequest;


    /**
     * Creates new form HarvestingTaskWorkAreaJPanel
     */
    

    
    HarvestingTaskWorkAreaJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDirectory, EcoSystem system, Farmer farmer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.farmer = farmer;
        this.userAccount = farmer.getUserAccount();
        this.organizationDirectory = organizationDirectory;
        this.organizationDirectory = organizationDirectory;
        this.farmer = farmer;
        this.system = system;
        this.userAccount = farmer.getUserAccount();
        for(Network network : system.getNetworkList())
       
            for(Enterprise e :network.getEnterpriseDirectory().getEnterpriseList())
            {
//                if(e.getOrganizationDirectory().getOrganizationList().contains(TransportOrganization.class))
                
                {
                    for(Organization org : e.getOrganizationDirectory().getOrganizationList())
                {
                    if(org instanceof TransportOrganization)
                    {
                        this.transportOrganization = (TransportOrganization) org;
                        for(WorkRequest wr : transportOrganization.getWorkQueue().getWorkRequestList())
                        {
                            if(wr.getFarmerUserId() == farmer.getFarmerId())
                            {
                                statusTxtFld.setText(wr.getStatus());
                        }
                    }
                }
                }
                
            }
        }

        for(WorkRequest workRequest: userAccount.getWorkQueue().getWorkRequestList())
        {
            if(workRequest instanceof HarvestingWorkRequest && workRequest != null && workRequest.getStatus().equalsIgnoreCase("Harvesting Started"))
            {
                harvestingWorkRequest = (HarvestingWorkRequest)workRequest;
                setDataInFields();
                startJBtn.setEnabled(false);
                endJBtn.setEnabled(true);
            }
            else if(workRequest instanceof HarvestingWorkRequest && workRequest != null && !workRequest.getStatus().equalsIgnoreCase("Harvesting Done"))
            {
                setDataInFields();
                startJBtn.setEnabled(false);
                endJBtn.setEnabled(false);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startJBtn = new javax.swing.JButton();
        endJBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        quantityTxtFld = new javax.swing.JTextField();
        packagingJBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        statusTxtFld = new javax.swing.JTextField();
        backJBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Harvesting Task - Farmer Role");

        startJBtn.setText("Start Harvesting Task");
        startJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startJBtnActionPerformed(evt);
            }
        });

        endJBtn.setText("End Harvesting Task");
        endJBtn.setEnabled(false);
        endJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endJBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Total Quantity produced:");

        packagingJBtn.setText("Request to start packaging and transport of produce");
        packagingJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packagingJBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Status:");

        statusTxtFld.setEnabled(false);

        backJBtn.setText("<< Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusTxtFld))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantityTxtFld))
                            .addComponent(startJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                            .addComponent(packagingJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(backJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(232, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(68, 68, 68)
                .addComponent(startJBtn)
                .addGap(18, 18, 18)
                .addComponent(endJBtn)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(quantityTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(packagingJBtn)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(statusTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(backJBtn)
                .addContainerGap(232, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void packagingJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packagingJBtnActionPerformed

        try
        {
            //farmer.setCropPrice(Integer.parseInt(priceTxtFld.getText()));
                farmer.setCropQuantity(Integer.parseInt(quantityTxtFld.getText()));
            farmer.setStatus("Transport Requested");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Only Numbers allowed in text box!!");
            System.out.println("Exception : " + e.getCause());
            return;  
        }
        
        
        int farmerId = farmer.getFarmerId();
     
      for(Network network : system.getNetworkList())
        {
            for(Enterprise e :network.getEnterpriseDirectory().getEnterpriseList())
            {
//                if(e.getOrganizationDirectory().getOrganizationList().contains(TransportOrganization.class))
                
                {
              for(Organization organization : e.getOrganizationDirectory().getOrganizationList())
            {
                if(organization instanceof TransportOrganization)
                {
                    for(WorkRequest twr: organization.getWorkQueue().getWorkRequestList())
                    {
                        //Object o = ((TransportWorkRequest)twr).getData();
                        System.out.println("TWR farmer id: " + ((TransportWorkRequest)twr).getFarmerUserId());
                        System.out.println("Farmer id from Farmer : " + farmer.getFarmerId());
                        if(((TransportWorkRequest)twr).getFarmerUserId() == farmerId)
                        {
                            twr.setStatus("Requested Transport");
                            ((TransportWorkRequest)twr).setData(farmer);
                            
                            //statusTextFeld.setText(farmer.getStatus());
                            JOptionPane.showMessageDialog(null, "Requested Transport");
                            return;
                        }
                         
                    }
                }
            }
                }
            }
        }
      
      for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
      {
          if(workRequest.getFarmerUserId()==farmerId)
          {
              workRequest.setStatus("Requested Transport");
              return;
          }
      }
//            for(WorkRequest workRequest : transportOrganization.getWorkQueue().getWorkRequestList())
//            {
//                if(((TransportWorkRequest)workRequest).getFarmerUserId() == farmerId)
//                        {
//                            workRequest.setStatus("Requested Transport");
//                            //statusTextFeld.setText(farmer.getStatus());
//                            JOptionPane.showMessageDialog(null, "Requested Transport");
//                            return;
//                        }
//            }
            //userAccount.getWorkQueue().getWorkRequestList().add(transportWorkRequest);
            
//            for(Network network : system.getNetworkList())
//        {
//            for(Enterprise e :network.getEnterpriseDirectory().getEnterpriseList())
//            {
////                if(e.getOrganizationDirectory().getOrganizationList().contains(TransportOrganization.class))
//                
//                {
//            for(Organization organization : organizationDirectory.getOrganizationList())
//            {
//                if(organization instanceof IrrigationOrganization)
//                {
//                    organization.getWorkQueue().getWorkRequestList().add(transportWorkRequest);
//                }
//            }
//                }
//            }
//        }

    }//GEN-LAST:event_packagingJBtnActionPerformed

    private void startJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startJBtnActionPerformed
        
        
        for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(workRequest instanceof HarvestingWorkRequest && workRequest.getStatus().equalsIgnoreCase("Reported to Harvesting Organization"))
            {
                workRequest.setResolveDate(new Date());
                ((Farmer)((FertilizerWorkRequest) workRequest).getData()).setStatus("Harvesting Started");
                workRequest.setStatus("Harvesting Started");
                JOptionPane.showMessageDialog(null, "Harvesting started for farmer with ID: " + ((Farmer)((HarvestingWorkRequest) workRequest).getData()).getFarmerId());
                return;
            }
        }
        for(Organization organization : organizationDirectory.getOrganizationList())
        {
            if(organization instanceof HarvestingOrganization)
            {
                for(WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList())
                {
                    if(workRequest.getFarmerUserId() == farmer.getFarmerId())
                    {
                        workRequest.setStatus("Harvesting Started");
                        farmer.setStatus("Harvesting Started");
                        ((HarvestingWorkRequest)workRequest).setData(farmer);
                        JOptionPane.showMessageDialog(null, "Harvesting started for farmer with ID: " + ((Farmer)((HarvestingWorkRequest) workRequest).getData()).getFarmerId());
                        endJBtn.setEnabled(true);
                        startJBtn.setEnabled(false);
                        quantityTxtFld.setEnabled(false);
                        return;
                        //break;
                                               
                    }
                }
            }
        }
                
        endJBtn.setEnabled(true);
        startJBtn.setEnabled(false);
    }//GEN-LAST:event_startJBtnActionPerformed

    private void endJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endJBtnActionPerformed
        
        
        for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(workRequest instanceof HarvestingWorkRequest && workRequest.getStatus().equalsIgnoreCase("Harvesting Started"))
            {
                if(quantityTxtFld.getText().isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "Please enter harvesting quantity produced!!");
                    return;
                }
                workRequest.setResolveDate(new Date());
                ((Farmer)((FertilizerWorkRequest) workRequest).getData()).setStatus("Harvesting Done");
                workRequest.setStatus("Harvesting Done");
                JOptionPane.showMessageDialog(null, "Harvesting Done for farmer with ID: " + ((Farmer)((HarvestingWorkRequest) workRequest).getData()).getFarmerId());
                return;
            }
        }
        for(Organization organization : organizationDirectory.getOrganizationList())
        {
            if(organization instanceof HarvestingOrganization)
            {
                for(WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList())
                {
                    if(workRequest.getFarmerUserId() == farmer.getFarmerId())
                    {
                        workRequest.setStatus("Harvesting Done");
                        farmer.setStatus("Harvesting Done");
                        ((HarvestingWorkRequest)workRequest).setData(farmer);
                        JOptionPane.showMessageDialog(null, "Harvesting Done for farmer with ID: " + ((Farmer)((HarvestingWorkRequest) workRequest).getData()).getFarmerId());
                        endJBtn.setEnabled(false);
                        startJBtn.setEnabled(false);
                        return;
                                               
                    }
                }
            }
        }
                
        endJBtn.setEnabled(true);
        startJBtn.setEnabled(false);
        
    }//GEN-LAST:event_endJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJBtn;
    private javax.swing.JButton endJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton packagingJBtn;
    private javax.swing.JTextField quantityTxtFld;
    private javax.swing.JButton startJBtn;
    private javax.swing.JTextField statusTxtFld;
    // End of variables declaration//GEN-END:variables

    private void setDataInFields() 
    {
        quantityTxtFld.setText(farmer.getCropQuantity()+"");
        quantityTxtFld.setEnabled(false);
    }
}
