/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.IrrigationAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Farmer.Farmer;
import Business.Organization.FertilizerOrganization;
import Business.Organization.IrrigationOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FertilizerWorkRequest;
import Business.WorkQueue.IrrigationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jocel
 */
public class IrrigationAdminMonitorAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form IrrigationAdminWorkAreaJPanel
     */
    
    private JPanel userProcessContainer;
    private IrrigationOrganization organization;
    private FertilizerOrganization fertilizerOrganization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    public IrrigationAdminMonitorAreaJPanel(JPanel userProcessContainer, UserAccount account, IrrigationOrganization organization, Enterprise enterprise, EcoSystem system) {
        
    }

    IrrigationAdminMonitorAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        //this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(org instanceof FertilizerOrganization)
            {
                this.fertilizerOrganization = (FertilizerOrganization) org;
            }
        }
        valueLabel.setText(enterprise.getName());
        populateTable();
    }

    private void populateTable() 
    {
        DefaultTableModel model = (DefaultTableModel) farmersAssignedToIrrigationJTable.getModel();
        
        model.setRowCount(0);
        
        for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            Object[] row = new Object[7];
            row[0] = ((Farmer)((IrrigationWorkRequest)workRequest).getData()).getFarmerId();
            row[1] = ((Farmer)((IrrigationWorkRequest)workRequest).getData()).getFarmerName();
            row[2] = ((Farmer)((IrrigationWorkRequest)workRequest).getData()).getFarmSize();
            row[3] = ((Farmer)((IrrigationWorkRequest)workRequest).getData()).getCropName();
            row[4] = (((IrrigationWorkRequest)workRequest)).getStatus();
            row[5] = ((Farmer)((IrrigationWorkRequest)workRequest).getData());
            row[6] = ((Farmer)((IrrigationWorkRequest)workRequest).getData()).getStatus();
            model.addRow(row);
            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        farmersAssignedToIrrigationJTable = new javax.swing.JTable();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        assignedFarmersLabel = new javax.swing.JLabel();
        startIrrigationJButton = new javax.swing.JButton();
        stopIrrigationJButton = new javax.swing.JButton();
        selectFarmerAssignedLabel = new javax.swing.JLabel();
        reportToFertilizerAdminJButton = new javax.swing.JButton();
        backJBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        farmersAssignedToIrrigationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Farmer ID", "Farmer Name", "Farm Size", "Crop Selected", "Irrigation Status", "Object", "Farmer status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(farmersAssignedToIrrigationJTable);
        if (farmersAssignedToIrrigationJTable.getColumnModel().getColumnCount() > 0) {
            farmersAssignedToIrrigationJTable.getColumnModel().getColumn(5).setMinWidth(0);
            farmersAssignedToIrrigationJTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            farmersAssignedToIrrigationJTable.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        enterpriseLabel.setText("Enterprise :");

        valueLabel.setText("<value>");

        assignedFarmersLabel.setText("Farmer's Assigned to me:");

        startIrrigationJButton.setText("Start Irrigation Process");
        startIrrigationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startIrrigationJButtonActionPerformed(evt);
            }
        });

        stopIrrigationJButton.setText("Stop Irrigation Process");
        stopIrrigationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopIrrigationJButtonActionPerformed(evt);
            }
        });

        selectFarmerAssignedLabel.setText("Select Farmer to Report to Fertilizer Admin");

        reportToFertilizerAdminJButton.setText("Report");
        reportToFertilizerAdminJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportToFertilizerAdminJButtonActionPerformed(evt);
            }
        });

        backJBtn.setText("<< Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Irrigation Employee Monitoring Panel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectFarmerAssignedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reportToFertilizerAdminJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(307, 307, 307))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(assignedFarmersLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(startIrrigationJButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(stopIrrigationJButton))
                                .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addComponent(assignedFarmersLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startIrrigationJButton)
                    .addComponent(stopIrrigationJButton))
                .addGap(34, 34, 34)
                .addComponent(selectFarmerAssignedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportToFertilizerAdminJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reportToFertilizerAdminJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportToFertilizerAdminJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = farmersAssignedToIrrigationJTable.getSelectedRow();
        
        if (selectedRow < 0)
        {
           JOptionPane.showMessageDialog(null, "Please Select a Row");
           return;
        }
        
        String farmerStatus = (String)farmersAssignedToIrrigationJTable.getValueAt(selectedRow, 6);
        String requestStatus = (String)farmersAssignedToIrrigationJTable.getValueAt(selectedRow, 6);
        if(farmerStatus.equalsIgnoreCase("Reported to Fertilizer Organization"))
        {
            JOptionPane.showMessageDialog(null, "Already submitted report to Fertilizer Organization");
            return;
        }
        
        if(!requestStatus.equalsIgnoreCase("Irrigation Done"))
        {
            JOptionPane.showMessageDialog(null, "Irrigation is not done yet. So you can't report to fertilizer admin");
            return;
        }
        
        Farmer farmer = (Farmer)farmersAssignedToIrrigationJTable.getValueAt(selectedRow, 5);
        FertilizerWorkRequest fertilizerWorkRequest = new FertilizerWorkRequest();
        for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(((Farmer)((IrrigationWorkRequest)workRequest).getData()).getStatus().equalsIgnoreCase("Reported to Fertilizer Organization"))
            {
                JOptionPane.showMessageDialog(null, "Farmer is already reported!!");
                return;  
            }
        }
        
        fertilizerWorkRequest.setReceiver(userAccount);
        fertilizerWorkRequest.setRequestDate(new Date());
        fertilizerWorkRequest.setStatus("Reported to Fertilizer Organization");
        fertilizerWorkRequest.setData(farmer);
        fertilizerWorkRequest.setFarmerUserId(farmer.getFarmerId());
        farmer.setStatus("Reported to Fertilizer Organization");
        fertilizerOrganization.getWorkQueue().getWorkRequestList().add(fertilizerWorkRequest);
        //userAccount.getWorkQueue().getWorkRequestList().add(irrigationWorkRequest);
         JOptionPane.showMessageDialog(null, "Farmer reported Successfully!!");
         populateTable();
    }//GEN-LAST:event_reportToFertilizerAdminJButtonActionPerformed

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void startIrrigationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startIrrigationJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = farmersAssignedToIrrigationJTable.getSelectedRow();
        
        if (selectedRow < 0)
        {
           JOptionPane.showMessageDialog(null, "Please Select a Row");
           return;
        }
        String status = (String)farmersAssignedToIrrigationJTable.getValueAt(selectedRow, 4);
        if(status.equalsIgnoreCase("Irrigation Started"))
        {
            JOptionPane.showMessageDialog(null, "Irrigation is already started. So you can't start again");
            return;
        }
        
        for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(workRequest instanceof IrrigationWorkRequest && workRequest.getStatus().equalsIgnoreCase("Requested Irrigation"))
            {
                workRequest.setResolveDate(new Date());
                ((Farmer)((IrrigationWorkRequest) workRequest).getData()).setStatus("Irrigation Started");
                workRequest.setStatus("Irrigation Started");
                JOptionPane.showMessageDialog(null, "Irrigation started for farmer with ID: " + ((Farmer)((IrrigationWorkRequest) workRequest).getData()).getFarmerId());
                return;
            }
        }
        populateTable();
        
    }//GEN-LAST:event_startIrrigationJButtonActionPerformed

    private void stopIrrigationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopIrrigationJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = farmersAssignedToIrrigationJTable.getSelectedRow();
        
        if (selectedRow < 0)
        {
           JOptionPane.showMessageDialog(null, "Please Select a Row");
           return;
        }
        
        
        for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(workRequest instanceof IrrigationWorkRequest)
            {
                workRequest.setResolveDate(new Date());
                ((Farmer)((IrrigationWorkRequest) workRequest).getData()).setStatus("Irrigation Done");
                workRequest.setStatus("Irrigation Done");
            }
        }
        populateTable();
        
    }//GEN-LAST:event_stopIrrigationJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assignedFarmersLabel;
    private javax.swing.JButton backJBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JTable farmersAssignedToIrrigationJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton reportToFertilizerAdminJButton;
    private javax.swing.JLabel selectFarmerAssignedLabel;
    private javax.swing.JButton startIrrigationJButton;
    private javax.swing.JButton stopIrrigationJButton;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
